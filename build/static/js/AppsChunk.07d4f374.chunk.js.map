{"version":3,"sources":["theme/Form.js","selectors/apps.js","actions/updateApp.js","containers/Apps.js"],"names":["Button","styled","button","_templateObject","ButtonSecondary","Link","_templateObject2","Label","label","_templateObject3","Input","input","_templateObject4","props","border","Form","form","_templateObject5","Text","p","_templateObject6","color","apps","state","getState","actionTypes","UPDATE_APP_REQUEST","UPDATE_APP_SUCCESS","UPDATE_APP_FAILURE","getApp","appId","name","fetch","concat","API_URL","method","body","JSON","stringify","headers","Object","objectSpread","headerOptions","Authorization","localStorage","getItem","requestOptions","App","this","loadApp","updateApp","app","_this","id","logo","react_default","a","createElement","GlobalStyle","key","src","alt","formik_esm","initialValues","validate","values","errors","onSubmit","updateClick","render","_ref","handleChange","handleBlur","handleSubmit","onChange","onBlur","value","type","placeholder","to","_this2","getApps","items","map","renderApp","Loading","Component","connect","AppSelectors","getLogin","LoginSelectors","dispatch","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","sent","json","t0","error","stop","_x","apply","arguments"],"mappings":"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","file":"static/js/AppsChunk.07d4f374.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport {Link} from 'react-router-dom';\n\nexport const Button = styled.button`\n    height: 40px;\n    width: 100%;\n    color: #FFF;\n    border-radius: 3px;\n    background-color: #005E85;\n    margin: 1rem auto 0 auto;\n    border: 0;\n    font-size: .8rem;\n    text-transform: uppercase;\n    max-width: 700px;\n    cursor: pointer;\n    transition: .2s linear;\n    &:hover {\n      background-color: #008dbd;\n    }\n`;\n\nexport const ButtonSecondary = styled(Link)`\n    height: 40px;\n    width: 100%;\n    color: #FFF;\n    border-radius: 3px;\n    background-color: #4d5870;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-decoration: none;\n    font-size: .8rem;\n    text-transform: uppercase;\n    margin-top: 1rem;\n    border: 0;\n    cursor: pointer;\n    transition: .2s linear;\n    &:hover {\n        background-color: #3d4658;\n    }\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    color: #14233c;\n    font-size: 0.8em;\n    margin: 0.5em 0;\n    position: relative;\n    width: 100%;\n`;\n\nexport const Input = styled.input`\n    width: 100%;\n    height: 40px;\n    border: ${props => props.border || '1px solid #ccc'};\n    background-color: #fff;\n    margin-top: 1rem;\n    padding: 0 1rem;\n    border-radius: 3px;\n`;\n\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 0 auto;\n    background: #FFF;\n    width: 100%;\n    text-align: left;\n`;\n\nexport const Text = styled.p`\n  color: ${props => props.color || '#4d4d4d'};\n  font-size: .8rem;\n`;\n","const getState = state => state || {};\n\nexport const getApps = state => getState(state).apps || {};\n\nexport default {\n    getApps\n};\n","import {API_URL, headerOptions} from '../constants/api';\n\nexport const actionTypes = {\n    UPDATE_APP_REQUEST: 'UPDATE_APP_REQUEST',\n    UPDATE_APP_SUCCESS: 'UPDATE_APP_SUCCESS',\n    UPDATE_APP_FAILURE: 'UPDATE_APP_FAILURE'\n};\n\nconst requestOptions = name => ({\n    method: 'PUT',\n    body: JSON.stringify({'name': name}),\n    headers: {\n        ...headerOptions,\n        'Authorization': localStorage.getItem('token')\n    }\n});\n\nconst getApp = (appId, name) => fetch(`${API_URL}/apps/${appId}`, requestOptions(name));\n\nexport function updateApp(appId, name) {\n    return async dispatch => {\n\n        dispatch({type: actionTypes.UPDATE_APP_REQUEST});\n\n        try {\n            const response = await getApp(appId, name);\n            const data = await response.json();\n\n            dispatch({\n                data,\n                type: actionTypes.UPDATE_APP_SUCCESS\n            });\n\n        } catch (error) {\n            dispatch({\n                error,\n                type: actionTypes.UPDATE_APP_FAILURE\n            });\n        }\n    };\n};\n","//@flow\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Formik} from 'formik';\nimport AppSelectors from '../selectors/apps';\nimport LoginSelectors from '../selectors/login';\nimport {loadApp} from '../actions/apps';\nimport {updateApp} from '../actions/updateApp';\nimport {Loading} from '../components/Loading';\nimport {Button, ButtonSecondary, Input, Form, Text, Label} from '../theme/Form';\nimport {Image, Title, ContentWrap, ContentItem} from '../theme/GlobalStyle';\n\ntype Content = {\n    created: string,\n    id: string,\n    logo: string,\n    name: string\n}\n\ntype TestProps = {\n    getApps: {\n        items: Array<Content>,\n        loading: boolean\n    },\n    loadApp: () => void,\n    updateApp: (string, string) => void\n}\n\nclass App extends Component<TestProps> {\n\n    componentDidMount() {\n        this.props.loadApp();\n    }\n\n    updateClick(appId, name) {\n        this.props.updateApp(appId, name);\n        this.props.loadApp();\n    }\n\n    renderApp(app) {\n\n        const {id, logo, name} = app;\n\n        return (\n            <ContentItem key={id}>\n                {logo && <Image src={logo} alt={name} />}\n                <Formik\n                    initialValues={{name: ''}}\n                    validate={values => {\n                        let errors = {};\n\n                        if (!values.name) {\n                            errors.name = 'Enter new app name';\n                        }\n                        return errors;\n\n                    }}\n                    onSubmit={values => {\n                        this.updateClick(id, values.name);\n                    }}\n                    render={({\n                        errors,\n                        values,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit\n                    }) => (\n                        <Form onSubmit={handleSubmit}>\n                            <Label><h2>{name}</h2>\n                                <Input\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.name}\n                                    border={errors.name && '1px solid red'}\n                                    type=\"text\"\n                                    name=\"name\"\n                                    placeholder=\"Update app name\"\n                                />\n                            </Label>\n                            {errors.name && <Text color=\"red\">{errors.name}</Text>}\n                            <Button type=\"submit\">Update app name</Button>\n                        </Form>\n                    )}\n                />\n                <ButtonSecondary to={`/apps/${id}`}>View app users</ButtonSecondary>\n            </ContentItem>\n        );\n    }\n\n    render() {\n\n        const {getApps} = this.props;\n\n        return (\n            <div>\n                <Title>Apps</Title>\n                {getApps && getApps.items ?\n                    <ContentWrap>{getApps.items.map(app => this.renderApp(app))}</ContentWrap> : <Loading />}\n            </div>\n        );\n\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        getApps: AppSelectors.getApps(state),\n        getLogin: LoginSelectors.getLogin(state)\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    loadApp: () => dispatch(loadApp(dispatch)),\n    updateApp: (appId, name) => dispatch(updateApp(appId, name))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"],"sourceRoot":""}